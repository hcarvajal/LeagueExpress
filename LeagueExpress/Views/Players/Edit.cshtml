@model LeagueExpress.Models.Player

@{
    ViewBag.Title = "Edit Player";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
  
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)



        <div class="form-group">
            @Html.LabelFor(model => model.hasPayed, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.hasPayed, new SelectList(new List<object>
                {
                       new {value = 0, text = "No"},
                       new {value = 1, text = "Yes" }
                },
                   "value",
                   "text",
                   2
                ), htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.hasPayed, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.currentTeam, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.currentTeam, new SelectList(new List<object>
                {
                       new {value = "", text = ""},
                       new {value = "Green", text = "Green"},
                       new {value = "Purple", text = "Purple" },
                       new {value = "White", text = "White" },
                       new {value = "Yellow", text = "Yellow" },
                       new {value = "Black", text = "Black" },
                       new {value = "Red", text = "Red" },
                       new {value = "Navy Blue", text = "Navy Blue" },
                       new {value = "Grey", text = "Grey" },
                       new {value = "Light Blue", text = "Light Blue" },
                       new {value = "Free Agent", text = "Free Agent"}
                },
                   "value",
                   "text",
                   2
                ), htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.currentTeam, "", new { @class = "text-danger" })
            </div>


            @Html.LabelFor(model => model.playerStatus, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.playerStatus, new SelectList(new List<object>
                {
                       new {value = "pending", text = "pending"},
                       new {value = "approved", text = "approved"},
                       new {value = "denied", text = "denied"}                    
                },
                   "value",
                   "text",
                   2
                ), htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.playerStatus, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.isCaptain, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.isCaptain, new SelectList(new List<object>
                {
                       new {value = "", text = ""},
                       new {value = "0", text = "No"},
                       new {value = "1", text = "Yes"},
                },
                   "value",
                   "text",
                   2
                ), htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.isCaptain, "", new { @class = "text-danger" })
            </div>

            @Html.LabelFor(model => model.Gender,htmlAttributes: new { @class ="control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender, new SelectList(new List<object>
           {
               new {value = "", text = "" },
               new {value = "femail", text = "female"},
               new {value = "male", text = "male"}
                },
                   "value",
                   "text",
                   2
                ),htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.Gender,"Gender cannot be blank",htmlAttributes: new { @class = "text-danger"})
            </div>


            @Html.LabelFor(model => model.playerPosition, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.playerPosition, new SelectList(new List<object>
           {
                 new {value = "Forward", text = "Forward"},
                 new {value = "Midfield", text = "Midfield"},
                 new {value = "Defender", text = "Defender"},
                 new {value = "Goalie", text = "Goalie"}
                },
                   "value",
                   "text",
                   2
                ), htmlAttributes: new { @class = "form-control" })

                @Html.ValidationMessageFor(model => model.playerPosition, "Position cannot be blank", htmlAttributes: new { @class = "text-danger" })
            </div>


        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Manage")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
